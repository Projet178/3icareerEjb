package beans;
// Generated 22 nov. 2015 15:00:06 by Hibernate Tools 4.3.1.Final

import interfaces.ImpEtudiant;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.ejb.Remote;
import javax.ejb.Stateful;
import javax.ejb.Stateless;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.bouncycastle.util.encoders.Hex;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * Etudiant generated by hbm2java
 */
@Stateful
@Remote(ImpEtudiant.class)
@Entity
@Table(name = "etudiant", schema = "public")
public class Etudiant implements java.io.Serializable, ImpEtudiant {

	private int idutilisateur;
	private Utilisateur utilisateur;
	private String ine;
	private Date datenaissance;
	private int numeroetudiant;
	private String mobiliteetudiant;
	private Date disponibiliteetudiant;
	private String nombremaxcv;
	private String nombremaxmetier;
	private String nombremaxcompetence;
	private String photo;
	private String anneeetudeetudiant;
	private Set<Experience> experiences = new HashSet<Experience>(0);
	private Set<Detenirposte> detenirpostes = new HashSet<Detenirposte>(0);
	private Set<Suivreformation> suivreformations = new HashSet<Suivreformation>(0);
	private Set<Cv> cvs = new HashSet<Cv>(0);
	private ManagerDao managerDao;
	public Etudiant() {
	}
	public Etudiant(String nomutilisateur, String prenomutilisateur, String motdepasse,
			String email, Date dateinscription, String ine, Date datenaissance, int numeroetudiant, String nombremaxcv,
			String nombremaxmetier, String nombremaxcompetence, String anneeetudeetudiant) throws NoSuchAlgorithmException, UnsupportedEncodingException {
			motdepasse = motdepasse(motdepasse,dateinscription);
			Utilisateur utilisateur = new Utilisateur(nomutilisateur, prenomutilisateur, motdepasse, email, dateinscription);
			System.out.println("création util debut");
			//UtilisateurDao utilisateur_dao = new UtilisateurDao();
			System.out.println("creation util fin");
			System.out.println(utilisateur.getEmail());
			//utilisateur_dao.ajouterUtilisateur(utilisateur);
			//this.idutilisateur = utilisateur.getIdutilisateur();
			this.utilisateur=utilisateur;
			this.ine = ine;
			this.datenaissance = datenaissance;
			this.numeroetudiant = numeroetudiant;
			this.nombremaxcv = nombremaxcv;
			this.nombremaxmetier = nombremaxmetier;
			this.nombremaxcompetence = nombremaxcompetence;
			this.anneeetudeetudiant = anneeetudeetudiant;
			
		}

	public Etudiant(Utilisateur utilisateur, String ine, Date datenaissance, int numeroetudiant,
			String mobiliteetudiant, Date disponibiliteetudiant, String nombremaxcv, String nombremaxmetier,
			String nombremaxcompetence, String photo, String anneeetudeetudiant, Set<Experience> experiences,
			Set<Detenirposte> detenirpostes, Set<Suivreformation> suivreformations, Set<Cv> cvs) {
		this.utilisateur = utilisateur;
		this.ine = ine;
		this.datenaissance = datenaissance;
		this.numeroetudiant = numeroetudiant;
		this.mobiliteetudiant = mobiliteetudiant;
		this.disponibiliteetudiant = disponibiliteetudiant;
		this.nombremaxcv = nombremaxcv;
		this.nombremaxmetier = nombremaxmetier;
		this.nombremaxcompetence = nombremaxcompetence;
		this.photo = photo;
		this.anneeetudeetudiant = anneeetudeetudiant;
		this.experiences = experiences;
		this.detenirpostes = detenirpostes;
		this.suivreformations = suivreformations;
		this.cvs = cvs;
	}

	//@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "utilisateur") )
	@Id
	//@GeneratedValue(generator = "generator")

	@Column(name = "idutilisateur", unique = true, nullable = false)
	public int getIdutilisateur() {
		return this.idutilisateur;
	}

	public void setIdutilisateur(int idutilisateur) {
		this.idutilisateur = idutilisateur;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Utilisateur getUtilisateur() {
		return this.utilisateur;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	@Column(name = "ine", nullable = false)
	public String getIne() {
		return this.ine;
	}

	public void setIne(String ine) {
		this.ine = ine;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "datenaissance", nullable = false, length = 13)
	public Date getDatenaissance() {
		return this.datenaissance;
	}

	public void setDatenaissance(Date datenaissance) {
		this.datenaissance = datenaissance;
	}

	@Column(name = "numeroetudiant", nullable = false)
	public int getNumeroetudiant() {
		return this.numeroetudiant;
	}

	public void setNumeroetudiant(int numeroetudiant) {
		this.numeroetudiant = numeroetudiant;
	}

	@Column(name = "mobiliteetudiant")
	public String getMobiliteetudiant() {
		return this.mobiliteetudiant;
	}

	public void setMobiliteetudiant(String mobiliteetudiant) {
		this.mobiliteetudiant = mobiliteetudiant;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "disponibiliteetudiant", length = 13)
	public Date getDisponibiliteetudiant() {
		return this.disponibiliteetudiant;
	}

	public void setDisponibiliteetudiant(Date disponibiliteetudiant) {
		this.disponibiliteetudiant = disponibiliteetudiant;
	}

	@Column(name = "nombremaxcv", nullable = false, length = 32)
	public String getNombremaxcv() {
		return this.nombremaxcv;
	}

	public void setNombremaxcv(String nombremaxcv) {
		this.nombremaxcv = nombremaxcv;
	}

	@Column(name = "nombremaxmetier", nullable = false, length = 32)
	public String getNombremaxmetier() {
		return this.nombremaxmetier;
	}

	public void setNombremaxmetier(String nombremaxmetier) {
		this.nombremaxmetier = nombremaxmetier;
	}

	@Column(name = "nombremaxcompetence", nullable = false, length = 32)
	public String getNombremaxcompetence() {
		return this.nombremaxcompetence;
	}

	public void setNombremaxcompetence(String nombremaxcompetence) {
		this.nombremaxcompetence = nombremaxcompetence;
	}

	@Column(name = "photo", length = 32)
	public String getPhoto() {
		return this.photo;
	}

	public void setPhoto(String photo) {
		this.photo = photo;
	}

	@Column(name = "anneeetudeetudiant", nullable = false, length = 32)
	public String getAnneeetudeetudiant() {
		return this.anneeetudeetudiant;
	}

	public void setAnneeetudeetudiant(String anneeetudeetudiant) {
		this.anneeetudeetudiant = anneeetudeetudiant;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "etudiant")
	public Set<Experience> getExperiences() {
		return this.experiences;
	}

	public void setExperiences(Set<Experience> experiences) {
		this.experiences = experiences;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "etudiant")
	public Set<Detenirposte> getDetenirpostes() {
		return this.detenirpostes;
	}

	public void setDetenirpostes(Set<Detenirposte> detenirpostes) {
		this.detenirpostes = detenirpostes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "etudiant")
	public Set<Suivreformation> getSuivreformations() {
		return this.suivreformations;
	}

	public void setSuivreformations(Set<Suivreformation> suivreformations) {
		this.suivreformations = suivreformations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "etudiant")
	public Set<Cv> getCvs() {
		return this.cvs;
	}

	public void setCvs(Set<Cv> cvs) {
		this.cvs = cvs;
	}
	public String motdepasse(String motdepasse,Date dateinscription) throws NoSuchAlgorithmException, UnsupportedEncodingException{
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		motdepasse = motdepasse + dateinscription;
		System.out.println("->motdepasse initial = "+motdepasse);
		md.update(motdepasse.getBytes());
		byte[] digest = md.digest();
		motdepasse = new String(Hex.encode(digest));
		System.out.println("->motdepasse encodé = "+motdepasse);
		return motdepasse;
	}

}

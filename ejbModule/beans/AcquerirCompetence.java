package beans;
// Generated 22 nov. 2015 15:00:06 by Hibernate Tools 4.3.1.Final

import interfaces.ImpAcquerirCompetence;

import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * AcquerirCompetence generated by hbm2java
 */
@Remote(ImpAcquerirCompetence.class)
@Stateless
@SuppressWarnings("serial")
@Entity
@Table(name = "acquerir_competence", schema = "public")
public class AcquerirCompetence implements java.io.Serializable, ImpAcquerirCompetence {

	private AcquerirCompetenceId id;
	private Competence competence;
	private Utilisateur utilisateur;
	private Character libelle;

	public AcquerirCompetence() {
	}

	public AcquerirCompetence(AcquerirCompetenceId id, Competence competence, Utilisateur utilisateur) {
		this.id = id;
		this.competence = competence;
		this.utilisateur = utilisateur;
	}

	public AcquerirCompetence(AcquerirCompetenceId id, Competence competence, Utilisateur utilisateur,
			Character libelle) {
		this.id = id;
		this.competence = competence;
		this.utilisateur = utilisateur;
		this.libelle = libelle;
	}

	@EmbeddedId

	@AttributeOverrides({
			@AttributeOverride(name = "idutilisateur", column = @Column(name = "idutilisateur", nullable = false) ),
			@AttributeOverride(name = "idcompetence", column = @Column(name = "idcompetence", nullable = false) ) })
	public AcquerirCompetenceId getId() {
		return this.id;
	}

	public void setId(AcquerirCompetenceId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idcompetence", nullable = false, insertable = false, updatable = false)
	public Competence getCompetence() {
		return this.competence;
	}

	public void setCompetence(Competence competence) {
		this.competence = competence;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idutilisateur", nullable = false, insertable = false, updatable = false)
	public Utilisateur getUtilisateur() { 
		return this.utilisateur;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	@Column(name = "libelle", length = 1)
	public Character getLibelle() {
		return this.libelle;
	}

	public void setLibelle(Character libelle) {
		this.libelle = libelle;
	}

}
